/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    chain-length = <27>;
};

/ {
        macros {
            term_key: term_key {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp Y>
                    , <&macro_release &kp LCTRL>
                    ;
            };
            lang: lang {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp SPACE>
                    , <&macro_release &kp LCTRL>
                    ;
            };
            move_left: move_left {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp LEFT>
                    , <&macro_release &kp LCTRL>
                    ;
            };
            move_right: move_right {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LCTRL>
                    , <&macro_tap &kp RIGHT>
                    , <&macro_release &kp LCTRL>
                    ;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | M0 |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | LALT |
//                    | CTRL | LWR | SPC |   | ENT | RSE  | GUI |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &term_key &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp LALT
                  &kp LCTRL &mo 1 &kp SPACE     &kp RET &mo 2 &kp LGUI
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1    |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | LCTRL|       |     |     | M4  |     |   | LFT | DWN |  UP | RGT |     |      |
// | ESC  |       |     | M3  | M2  |     |   |     |     |     |     |     |      |
//                      | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp LBKT
   &kp LCTRL &trans &trans &trans &lang &btrans   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &kp RBKT
   &kp ESC  &trans    &trans       &move_left       &move_right       &trans         &kp COLON   &kp DQT   &kp PIPE2 &kp SEMI    &kp NUBS &kp LCTRL
                                    &kp LALT     &trans       &kp SPACE      &kp RET  &trans   &kp LGUI
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |   !   |   @   |   #   |   $   |   %   |   |  ^  |  &  |  *  |  (  |  )  | ESCP |
// |   ~  |[      |{      |  (    |_      |       |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | `    |  ]    |  }    |)      |-      |=      |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                            | GUI |     |  +    |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp ESC
   &kp TILDE &kp LBKT &kp LBRC &kp LPAR   &kp UNDER   &kp EQUAL     &trans &trans &trans  &trans &trans &kp PSCRN
   &kp GRAVE &kp RBKT &kp RBRC &kp RPAR   &kp MINUS   &kp PLUS      &trans &trans  &trans  &trans &trans &kp LCTRL
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
